#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug');
var dbLog = debug('backend:postgres');
var serverLog = debug('backend:server');
var http = require('http');
const { Server } = require('socket.io');
// const { Pool, Client } = require('pg');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// Websockets Setup
const io = new Server(server);
io.on("connection", (socket) => {
  
  // serverLog("Connecting: " + socket.id);
  socket.emit("connected");
  
  socket.on("join room", (room) => {
    socket.join(room);
    serverLog(socket.id + " joined room: " + room);
    socket.emit("room joined");
  });

  socket.on("publish new post", (post) => {
    io.to(`board ${post.board}`).emit("pull new post", { post });
  });

  socket.on("disconnect", (reason) => {
    serverLog("Disconnected: " + socket.id);
    serverLog("Reason: " + reason);
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */
// const client = new Client()
// client.connect()
//   .then(() => {
//     dbLog("Connected to Postgres successfully");
//     server.listen(port);
//   })
//   .catch((err) => {
//     serverLog(err);
//   });
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  serverLog('Listening on ' + bind);
}
